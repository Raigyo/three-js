<html lang="en"></html>
      <head>
        <meta charset="UTF-8">
        <title>Three JS</title>
        <%- include ('../../partials/head') %>
      </head>
    <body>
        <%- include ('../../partials/navbar') %>
        <canvas id="sceneCanvas"></canvas>
    </body>
    <footer>
        <%- include ('../../partials/footer') %>
    </footer>
</html>

<script>
    let scene, camera, renderer, butterfly;
    let ADD = 0.8;

    let createButterfly = function() {
        let geometry = new THREE.Geometry();

        let material = new THREE.MeshBasicMaterial({
            color: 0xff4606, side: THREE.DoubleSide});

        butterfly = new THREE.Mesh( geometry, material );
        //Create vertices and faces
        geometry.vertices.push( new THREE.Vector3(0, 0, 0));
        geometry.vertices.push( new THREE.Vector3(5, 0, 0));
        geometry.vertices.push( new THREE.Vector3(2, 4, 3));
        geometry.vertices.push( new THREE.Vector3(2, 4, -3));
        //wings
        let wing = new THREE.Face3(0, 1, 2);//wing1
        geometry.faces.push(wing);
        wing = new THREE.Face3(0, 1, 3);//wing2
        geometry.faces.push(wing);

        //butterfly position
        butterfly.rotation.z = 0.7;
        butterfly.rotation.x = 0.6;

        scene.add(butterfly);
    };

    // set up the environment -
    // initiallize scene, camera, objects and renderer
    let init = function() {
        // create the scene
        scene = new THREE.Scene();
        scene.background = new THREE.Color(0x000000);

        // create an locate the camera
        camera = new THREE.PerspectiveCamera(75,
                        window.innerWidth / window.innerHeight,
                        1, 1000);
        camera.position.z = 40;

        createButterfly();

        // create the renderer
        renderer = new THREE.WebGLRenderer( { canvas: sceneCanvas } );
        renderer.setSize(window.innerWidth, window.innerHeight-100);
    };

    // main animation loop - calls 50-60 times per second.
    let mainLoop = function() {
        butterfly.geometry.vertices[2].y += ADD;//move vertice 2 in y
        butterfly.geometry.vertices[3].y += ADD;//move vertice 3 in y
        butterfly.geometry.verticesNeedUpdate = true;
        //limit the inteval
        if(butterfly.geometry.vertices[2].y < -4 ||
           butterfly.geometry.vertices[2].y > 4)
            ADD *= -1;//invert the movement

        renderer.render(scene, camera);
        requestAnimationFrame(mainLoop);
    };

    ///////////////////////////////////////////////
    init();
    mainLoop();
</script>