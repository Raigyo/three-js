<html lang="en"></html>
      <head>
        <meta charset="UTF-8">
        <title>Three JS</title>
        <%- include ('../../partials/head') %>
      </head>
    <body>
        <%- include ('../../partials/navbar') %>

        <canvas id="sceneCanvas"></canvas>
    </body>
    <footer>
        <%- include ('../../partials/footer') %>
    </footer>
</html>

<script>
    let scene, camera, renderer, light1;
    let spheres = [];
    let ADD = 0.01, theta = 0;
    const RADIUS = 5, BASE_X = -20, BASE_Y = -20;
    let titles = "Perspective";
    let text;

      //Text "Perspective" / "Orthographic"
      //Load font.json and create material (async)
      let createText = function() {
        let loader = new THREE.FontLoader();
        loader.load( 'public/fonts/helvetiker_bold.typeface.json', function ( font ) {
          let geometry = new THREE.TextGeometry(
            titles, {font: font, size: 5, height: 0.1}
          );
          let  material = new THREE.MeshBasicMaterial({color:0x000000, wireframe: false});
          text = new THREE.Mesh(geometry , material);
          text.position.x = -30;
          scene.add(text);
        })
      }

    //Constructor to create sphere
    let createGeometry = function() {
        let material = new THREE.MeshPhongMaterial({color: 0X0450fb,
                                    shininess: 100, side: THREE.DoubleSide});
        for(let i = 0; i < 4; i++)
            for(let j = 0; j < 4; j++) {
                let geometry = new THREE.SphereGeometry(RADIUS, 30, 30);
                let sphere = new THREE.Mesh(geometry, material);
                sphere.position.x = BASE_X + j * 2 * (RADIUS+0.5);
                sphere.position.z = -2*RADIUS * i;
                sphere.position.y = BASE_Y + i * RADIUS;
                scene.add(sphere);
            }
    };

    // set up the environment -
    // initiallize scene, camera, objects and renderer
    let init = function() {
      createText();
      // create the scene
      scene = new THREE.Scene();
      scene.background = new THREE.Color(0xffffff);

      // create an locate the camera
      camera = new THREE.PerspectiveCamera(75,
                      window.innerWidth / window.innerHeight,
                      1, 1000);

      camera.position.set(0, 0, 40);

      light1 = new THREE.DirectionalLight(0xffffff, 1);

      scene.add(light1);

      createGeometry();

      // create the renderer
      renderer = new THREE.WebGLRenderer( { canvas: sceneCanvas } );
      renderer.setSize(window.innerWidth, window.innerHeight-100);
      //document.body.appendChild(renderer.domElement);
    };
    //Switch between perspective and orthographic
    let switchCamera = function() {
        if(camera instanceof THREE.PerspectiveCamera) {
            camera = new THREE.OrthographicCamera(-300, 300, 400, -400, 1, 1000);
            camera.zoom = 5;
            scene.remove(text);//change text
            titles = "Orthographic";
            createText();
            camera.updateProjectionMatrix();
        }
        else {
            camera = new THREE.PerspectiveCamera(75,
                        window.innerWidth / window.innerHeight,
                        1, 1000);
            camera.position.set(0, 0, 40);
            scene.remove(text);//change text
            titles = "Perspective";
            createText();
        }
    };

    // main animation loop - calls 50-60 times per second.
    let mainLoop = function() {
        camera.lookAt(new THREE.Vector3(0, 0, 0));
        camera.position.x = 40 * Math.sin(theta);
        camera.position.z = 40 * Math.cos(theta);
        theta += ADD;

        renderer.render(scene, camera);
        requestAnimationFrame(mainLoop);
        //Autoswitch between cameras
    };


    //autoswitch every 10 sec
    setInterval(function(){
      switchCamera ();
    }, 10000);



    ///////////////////////////////////////////////
    init();
    mainLoop();
</script>
